# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name cardstoard.com www.cardstoard.com;
    return 301 https://$host$request_uri;
}

# Force www â†’ bare domain (HTTPS)
server {
    listen 443 ssl;
    server_name www.cardstoard.com;

    ssl_certificate /etc/letsencrypt/live/cardstoard.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cardstoard.com/privkey.pem;

    return 301 https://cardstoard.com$request_uri;
}

# Define upstreams explicitly (prevents "host not found" on startup)
upstream frontend {
    server stoarfront:80;
}

upstream backend {
    server stoarback:8000;
}

# Main HTTPS server (bare domain only)
server {
    listen 443 ssl;
    server_name cardstoard.com;

    ssl_certificate /etc/letsencrypt/live/cardstoard.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cardstoard.com/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Frontend React app
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Backend API
    location /api/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Internal-only healthcheck server
server {
    listen 127.0.0.1:80;
    server_name localhost;

    location /api/health {
        proxy_pass http://backend/health;
    }
}
