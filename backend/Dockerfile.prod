# Use official Python slim image
FROM python:3.11-slim

WORKDIR /code

# Install system dependencies (curl, wget, build tools, Postgres, OCR)
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    build-essential \
    libpq-dev \
    tesseract-ocr \
    && rm -rf /var/lib/apt/lists/*

# Install dockerize (for wait-for-db behavior)
ENV DOCKERIZE_VERSION v0.7.0
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install gunicorn

# Copy application code
COPY . .

# Create photo upload directory
RUN mkdir -p /code/app/static/cards

# Expose backend port
EXPOSE 8000

# Default command: wait for DB, then start Uvicorn (no --reload in prod)
# CMD ["sh", "-c", "dockerize -wait tcp://stoardb:5432 -timeout 60s uvicorn app.main:app --host 0.0.0.0 --port 8000"]
# above is original CMD --- below CMD is tuned for load
CMD [
  "dockerize",
  "-wait", "tcp://stoardb:5432",
  "-timeout", "60s",
  "gunicorn",
  "app.main:app",
  "-w", "2",
  "-k", "uvicorn.workers.UvicornWorker",
  "-b", "0.0.0.0:8000",
  "--timeout", "90",
  "--keep-alive", "75",
  "--access-logfile", "-",
  "--error-logfile", "-"
]